/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eAmazonAds_autodefs.h"
#include "s3eEdk.h"
#include "s3eAmazonAds.h"

// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static s3eResult s3eAmazonAdsTerminate_wrap()
{
    IwTrace(AMAZONADS_VERBOSE, ("calling s3eAmazonAds func on main thread: s3eAmazonAdsTerminate"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAmazonAdsTerminate, 0);
}

static s3eResult s3eAmazonAdsLoadAd_wrap(s3eAmazonAdsId id, s3eBool show, int timeout)
{
    IwTrace(AMAZONADS_VERBOSE, ("calling s3eAmazonAds func on main thread: s3eAmazonAdsLoadAd"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAmazonAdsLoadAd, 3, id, show, timeout);
}

static s3eResult s3eAmazonAdsDestroyAd_wrap(s3eAmazonAdsId id)
{
    IwTrace(AMAZONADS_VERBOSE, ("calling s3eAmazonAds func on main thread: s3eAmazonAdsDestroyAd"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAmazonAdsDestroyAd, 1, id);
}

static s3eResult s3eAmazonAdsCollapseAd_wrap(s3eAmazonAdsId id)
{
    IwTrace(AMAZONADS_VERBOSE, ("calling s3eAmazonAds func on main thread: s3eAmazonAdsCollapseAd"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAmazonAdsCollapseAd, 1, id);
}

static s3eResult s3eAmazonAdsLoadInterstitialAd_wrap(s3eAmazonAdsId id)
{
    IwTrace(AMAZONADS_VERBOSE, ("calling s3eAmazonAds func on main thread: s3eAmazonAdsLoadInterstitialAd"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAmazonAdsLoadInterstitialAd, 1, id);
}

static s3eResult s3eAmazonAdsShowAd_wrap(s3eAmazonAdsId id)
{
    IwTrace(AMAZONADS_VERBOSE, ("calling s3eAmazonAds func on main thread: s3eAmazonAdsShowAd"));
    return (s3eResult)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eAmazonAdsShowAd, 1, id);
}

#define s3eAmazonAdsTerminate s3eAmazonAdsTerminate_wrap
#define s3eAmazonAdsLoadAd s3eAmazonAdsLoadAd_wrap
#define s3eAmazonAdsDestroyAd s3eAmazonAdsDestroyAd_wrap
#define s3eAmazonAdsCollapseAd s3eAmazonAdsCollapseAd_wrap
#define s3eAmazonAdsLoadInterstitialAd s3eAmazonAdsLoadInterstitialAd_wrap
#define s3eAmazonAdsShowAd s3eAmazonAdsShowAd_wrap

#endif

s3eResult s3eAmazonAdsRegister(s3eAmazonAdsCallback cbid, s3eCallback fn, void* pData)
{
    return s3eEdkCallbacksRegister(S3E_EXT_AMAZONADS_HASH, S3E_AMAZONADS_CALLBACK_MAX, cbid, fn, pData, 0);
};

s3eResult s3eAmazonAdsUnRegister(s3eAmazonAdsCallback cbid, s3eCallback fn)
{
    return s3eEdkCallbacksUnRegister(S3E_EXT_AMAZONADS_HASH, S3E_AMAZONADS_CALLBACK_MAX, cbid, fn);
}

void s3eAmazonAdsRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[16];
    funcPtrs[0] = (void*)s3eAmazonAdsRegister;
    funcPtrs[1] = (void*)s3eAmazonAdsUnRegister;
    funcPtrs[2] = (void*)s3eAmazonAdsGetErrorString;
    funcPtrs[3] = (void*)s3eAmazonAdsGetError;
    funcPtrs[4] = (void*)s3eAmazonAdsInit;
    funcPtrs[5] = (void*)s3eAmazonAdsTerminate;
    funcPtrs[6] = (void*)s3eAmazonAdsPrepareAd;
    funcPtrs[7] = (void*)s3eAmazonAdsPrepareAdLayout;
    funcPtrs[8] = (void*)s3eAmazonAdsSetAdTargetingOptions;
    funcPtrs[9] = (void*)s3eAmazonAdsGetAdTargetingOptions;
    funcPtrs[10] = (void*)s3eAmazonAdsLoadAd;
    funcPtrs[11] = (void*)s3eAmazonAdsDestroyAd;
    funcPtrs[12] = (void*)s3eAmazonAdsCollapseAd;
    funcPtrs[13] = (void*)s3eAmazonAdsLoadInterstitialAd;
    funcPtrs[14] = (void*)s3eAmazonAdsShowAd;
    funcPtrs[15] = (void*)s3eAmazonAdsInspectAd;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[16] = { 0 };

    /*
     * Register the extension
     */
s3eEdkRegister("s3eAmazonAds", funcPtrs, sizeof(funcPtrs), flags, NULL, NULL, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eAmazonAdsStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eAmazonAdsRegisterExt;
    return 0;
}

int g_s3eAmazonAdsVal = s3eAmazonAdsStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eAmazonAdsRegisterExt();
}
#endif

#endif
